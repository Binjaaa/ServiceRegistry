@model SRR.Web.ViewModels.Application.ApplicationIndexViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Applications</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table>
    <tr>
        @*  <th>
            @Html.DisplayNameFor(model => model.PK_ID)
        </th>*@
        <th>Name
        </th>
        <th>Version
        </th>
        <th>Developer
        </th>
        <th>Owner
        </th>
        @*  <th>
            @Html.DisplayNameFor(model => model.Keywords)
        </th>*@
        @*<th></th>*@
    </tr>

    @foreach (var item in Model.ItemsToList)
    {
        <tr>
            @*  <td>
                @Html.DisplayFor(modelItem => item.PK_ID)
            </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Version)
            </td>
            @* <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>*@
            <td>
                @if (item.FK_Developer != default(int))
                {
                    @Html.DisplayFor(modelItem => item.Developer.Name)   
                }
            </td>

            <td>
                @if (item.FK_Owner != default(int))
                {
                    @Html.DisplayFor(modelItem => item.Owner.Name)   
                }
            </td>
            @* <td>
                @Html.DisplayFor(modelItem => item.AttachedObjects)
            </td>*@
            @* <td>
            @Html.DisplayFor(modelItem => item.Keywords)
        </td>*@
            <td style="width: 500px">
                @Html.ActionLink("Edit", "Edit", new { id = item.PK_ID }) |
            @Html.ActionLink("Details", "Details", new { id = item.PK_ID }) |
            @Html.ActionLink("Delete", "Delete", new { id = item.PK_ID })
            </td>
        </tr>
    }

</table>

@*<h2>Timesheets</h2>*@

@*<div class="btn-toolbar" data-bind="visible: viewModel.timesheetsSelected() > 0">
    <div class="btn-group">
        <span class="btn btn-primary">Actions</span>
        <a class="btn btn-primary dropdown-toggle" data-toggle="dropdown" href="">
            <span class="caret"></span>
        </a>
        <ul class="dropdown-menu">
            <li><a id="new-timesheet"
                data-toggle="modal"
                href="#timesheet-delete">Delete</a></li>
        </ul>
    </div>
</div>

<table id="timesheets" class="table table-striped table-hover table-condensed">
    <thead>
        <tr>
            <th></th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Month</th>
            <th>Year</th>
        </tr>
    </thead>
    <tbody data-bind="foreach: viewModel.timesheets">
        <tr data-bind="click: function (form) { edit('TimeSheet') }" data-toggle="modal">
            <td>
                <input type="checkbox" data-bind="checked: selected" /></td>
            <td><a href="#timesheet-modal" data-bind="text: FirstName, click: function (form) { edit('Timesheet') }" data-toggle="modal"></a></td>
            <td><a href="#timesheet-modal" data-bind="text: LastName, click: function (form) { edit('Timesheet') }" data-toggle="modal"></a></td>
            <td data-bind="text: Month"></td>
            <td data-bind="text: Year"></td>
        </tr>
    </tbody>
</table>

<div class="pull-right">
    <a id="new-timesheet" class="btn btn-success" data-toggle="modal" href="#timesheet-modal">Add timesheet</a>
</div>

<div class="modal hide fade" id="timesheet-modal">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">×</button>
        <h3>Timesheet</h3>
    </div>

    <form id="Timesheet" data-bind="submit: function (form) { postTimesheet(form, 'timesheet-modal') }">
        <div class="modal-body">
            @{ Html.RenderPartial("_TimeSheetPartial", new TimeSheet()); }
        </div>

        <div class="modal-footer">
            <a href="#" class="btn" data-dismiss="modal">Cancel</a>
            <input type="submit" class="btn btn-primary" value="Save" />
        </div>
    </form>
</div>*@

<script type="text/javascript">

    $(function () {
        ko.applyBindings(viewModel);
        viewModel.loadTimesheets();
    });

    function timesheet(timesheet) {
        this.ID = ko.observable(timesheet.ID);
        this.FirstName = ko.observable(timesheet.FirstName);
        this.LastName = ko.observable(timesheet.LastName);
        this.Month = ko.observable(timesheet.Month);
        this.Year = ko.observable(timesheet.Year);
        this.selected = ko.observable(false);

        this.edit = function (formId) {
            var form = $('#' + formId);
            form.data('timesheet', this);
        };

        this.update = function (timesheet) {
            this.ID(timesheet.ID);
            this.FirstName(timesheet.FirstName);
            this.LastName(timesheet.LastName);
            this.Month(timesheet.Month);
            this.Year(timesheet.Year);
        };

        this.select = function (s, e) {
            console.log(e);
        };
    }

    var viewModel = {
        timesheets: ko.observableArray([]),

        loadTimesheets: function () {
            var self = this;
            $.getJSON(
                '@Url.RouteUrl("DefaultApi", new { httproute = "", controller = "timesheets" })',
            function (timesheets) {
                self.timesheets.removeAll();
                $.each(timesheets, function (index, item) {
                    self.timesheets.push(new timesheet(item));
                });
            }
        );
        },

        postTimesheet: function (form, modalId) {
            form = $(form);
            if (!form.valid())
                return;

            var json = JSON.stringify(this._getTimesheetFromFrom(form));

            var update = form.find("input[type='hidden'][id='id']").val();
            var httpVerb = !update ? "POST" : "PUT";

            var self = this;
            $.ajax({
                url: '@Url.RouteUrl("DefaultApi", new { httproute = "", controller = "timesheets" })',
                type: httpVerb,
                data: json,
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (jsonObject) {
                    if (update) {
                        var match = ko.utils.arrayFirst(self.timesheets(), function (item) {
                            return jsonObject.id === item.id();
                        });
                        match.update(jsonObject);
                    }
                    else {
                        self.timesheets.push(new timesheet(jsonObject));
                    }
                    $('#' + modalId).modal('hide');
                }
            });
        },

        deleteTimesheets: function (modalId) {
            var ids = new Array();
            $.each(this.timesheets(), function (index, timesheet) {
                if (timesheet.selected())
                    ids.push(timesheet.id());
            });

            var self = this;
            $.ajax({
                url: '@Url.RouteUrl("DefaultApi", new { httproute = "", controller = "timesheets" })',
                type: 'DELETE',
                data: ko.toJSON(ids),
                contentType: 'application/json; charset=utf-8',
                success: function () {
                    $.each(ids, function (index, id) {
                        var match = ko.utils.arrayFirst(self.timesheets(), function (item) {
                            return id === item.id();
                        });
                        self.timesheets.remove(match);
                    });
                    $('#' + modalId).modal('hide');
                }
            });
        },

        _getTimesheetFromFrom: function (form) {
            form = $(form);
            var timesheet = {};
            form.find('input[type!=submit],select').each(function () {
                timesheet[this.name] = $(this).val();
            });
            return timesheet;
        }
    };

    $('#timesheet-modal').on('hide', function () {
        var form = $('#Timesheet');
        form.validate().resetForm();
        form.get(0).reset();
        form.removeData('timesheet');
        form.find("input[type='hidden'][id='id']").remove();
    });

    $('#timesheet-modal').on('show', function () {
        var form = $('#Timesheet');
        var timesheet = form.data('timesheet');
        if (!timesheet)
            return;

        $('<input>').attr('type', 'hidden')
                    .attr('id', 'id')
                    .attr('name', 'id')
                    .val(timesheet.id()).prependTo(form);
        form.find('#FirstName').val(timesheet.FirstName());
        form.find('#LastName').val(timesheet.LastName());
        form.find('#Month').val(timesheet.Month());
        form.find('#Year').val(timesheet.Year());
    });

    viewModel.timesheetsSelected = ko.computed(function () {
        var selected = 0;
        $.each(this.timesheets(), function (index, timesheet) {
            if (timesheet.selected())
                selected++;
        });
        return selected;
    }, viewModel);


</script>
